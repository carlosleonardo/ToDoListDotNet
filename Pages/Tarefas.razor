@page "/tarefas"
@inject ServicoToDo servicoToDo
@inject IJSRuntime runtimeJS

<PageTitle>Tarefas</PageTitle>

<ManterTarefa @ref="meuModal" Titulo="Adicionar Tarefa" AoConfirmarTarefa="Confirmando"/>

<div class="container-fluid p-3">
    <h1>Tarefas</h1>
    <button class="btn btn-primary" @onclick="AbrirDialogo">Adicionar</button>
</div>


<div class="container-fluid">
    <div class="card p-3 table table-striped">
        <table>
            <tr>
                <th>Id da tarefa</th>
                <th>Nome</th>
                <th>Descrição</th>
                <th>Finalizada</th>
                <th>Data início</th>
                <th>Data Término</th>
                <th>&nbsp;</th>
            </tr>
            
            @if(tarefas is null || tarefas.Count()==0) {
                <tr><td>Sem Tarefas</td></tr>
            } else {
                foreach(var tarefa in tarefas)
                {
                    <tr>
                        <td >@tarefa.Id</td>
                        <td >@tarefa.Nome </td>
                        <td >@tarefa.Descricao </td>
                        <td >@(tarefa.Finalizada ? "Sim": "Não") </td>
                        <td>@tarefa.DataInicio </td>
                        <td>@tarefa.DataTermino</td>
                        <td>
                            <button class="btn btn-close" @onclick="@(async ()=> await ExcluirTarefa(tarefa.Id))" disabled="@tarefa.Finalizada" ></button>
                            <button class="btn btn-primary" disabled="@tarefa.Finalizada" >Alterar</button>
                            <button class="btn btn-primary" disabled="@tarefa.Finalizada" >Finalizar</button>
                        </td>
                    </tr>

                }
            }
        </table>
    </div>
</div>

@code {
    private ManterTarefa meuModal = default!;

    private IList<Tarefa> tarefas = new List<Tarefa>();

    public Tarefa? Tarefa { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        await ObterTarefas();
    }

    public async Task ObterTarefas()
    {
        tarefas = await servicoToDo.ObterTarefas();
    }

    public async Task ExcluirTarefa(int id)
    {
        if ( !await runtimeJS.InvokeAsync<bool>("confirm", "Tem certeza de que quer excluir?"))
        {
            return;
        }
        var tarefa = await servicoToDo.ObterTarefa(id);
        if(tarefa is not null) {
            await servicoToDo.ExcluirTarefa(tarefa);
            await ObterTarefas();
        }
    }

    private async Task Confirmando(Tarefa tarefa)
    {
        await servicoToDo.AdicionarTarefa(tarefa);
        await ObterTarefas();
    }

    private async Task AbrirDialogo()
    {
        Tarefa = new() { DataInicio = DateTime.Now, Nome = string.Empty };
        meuModal.Tarefa = Tarefa;
        await meuModal.AbrirDialogo();    
    }   
}